/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package Currency_Converter;

import java.io.*;
import java.util.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
public class App {

    public boolean isAdmin = false;
    public boolean quiitted = false;
    public List<List<String>> rates = new ArrayList<>();
    public List<String> currency_types = new ArrayList<String>();
    public List<String> most_pop = new ArrayList<String>();
    public final String default_path = "src/main/resources/currencies.txt";

    // load the currencies from the resources folder
    public void load_data(String file_path){
        File data_file = new File(file_path);
        try{
            BufferedReader bfr = new BufferedReader(new FileReader(data_file));
            String line;
            while((line=bfr.readLine())!=null){
                List<String> line_list = new ArrayList<>(Arrays.asList(line.split(",")));
                this.rates.add(line_list);
                // add a new currency type if it didn't exist
                if (!this.currency_types.contains(line_list.get(0))){
                    currency_types.add(line_list.get(0));
                }
            }
            bfr.close();
        }
        catch (IOException e){
            System.out.println("Database file not found");
        }
    }

    // to determine whether the user is an admin
    public void switch_user(){
        Scanner keyboard = new Scanner(System.in);
        String if_switch = "";
        while (!(if_switch.equalsIgnoreCase("Y") || if_switch.equalsIgnoreCase("N"))){
            System.out.println("Are you an admin? Y/N");
            if_switch = keyboard.next();
            if (if_switch.equalsIgnoreCase("Y")){
                this.isAdmin = true;
                System.out.println("Welcome, admin!");
                break;
            }
            else if (if_switch.equalsIgnoreCase("N")){
                this.isAdmin = false;
                System.out.println("Welcome, user!");
                break;
            }
            else{
                System.out.println("Please enter \"Y\" or \"N\" to choose user type.");
            }
            System.out.println("===================================================================");
        }
            //brd.close();
    }

    /* ADMIN ONLY, add new currency type: NEW <currency_type>
    <currency_type> should not be in the currency type list.
    Command length is 2.
     */
    public void cmd_new(String input){
        if (this.isAdmin){
            List<String> cmd_list = new ArrayList<>(Arrays.asList(input.split(" ")));
            if (cmd_list.size() != 2){
                System.out.println("Wrong command length for NEW. Should be length of 2.");
            }
            else if (this.currency_types.contains(cmd_list.get(1).toUpperCase())){
                System.out.format("We already have currency %s.\n", cmd_list.get(1).toUpperCase());
            }
            else{
                this.currency_types.add(cmd_list.get(1).toUpperCase());
                System.out.format("New currency %s successfully added.\n", cmd_list.get(1).toUpperCase());
            }
        }
        else{
            System.out.println("Cannot add new currency type because you are not an admin.");
        }
    }

    /* ADMIN ONLY, add new conversion rate along with the date: ADD <FROM> <TO> <RATE> <DATE>
    Both <FROM> and <TO> should be in the currency type list.
    <RATE> should not be negative.
    <DATE> is in <YYYY-MM-DD> format and will be validated using java.text.SimpleDateFormat.
    If same <FROM> <TO> <DATE> has existed in the rate list, the action should be rejected.
    Command length is 5.
     */
    public void cmd_add(String input){
        if (this.isAdmin) {
            List<String> cmd_list = new ArrayList<>(Arrays.asList(input.split(" ")));
            if (cmd_list.size() != 5) {
                System.out.println("Wrong command length for ADD. Should be length of 5.");
            }
            else if (!(this.currency_types.contains(cmd_list.get(1).toUpperCase()) && this.currency_types.contains(cmd_list.get(2).toUpperCase()))){
                System.out.println("We don't have such currency type. Please try again.");
            }
            else if (cmd_list.get(1).equalsIgnoreCase(cmd_list.get(2))){
                System.out.println("Cannot convert to a currency itself. Please try again.");
            }
            else{
                try{
                    Double rate = Double.parseDouble(cmd_list.get(3));
                    if (rate <= 0){
                        System.out.println("Rate has to be positive. Please try again.");
                    }
                    else{
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                        try{
                            sdf.setLenient(false);
                            Date rate_date = sdf.parse(cmd_list.get(4));
                            boolean dup_flag = false;
                            for (int i = 0; i < this.rates.size(); i++){
                                if (this.rates.get(i).get(0).equalsIgnoreCase(cmd_list.get(1)) &&
                                        this.rates.get(i).get(1).equalsIgnoreCase(cmd_list.get(2)) &&
                                        this.rates.get(i).get(3).equals(sdf.format(rate_date))){
                                    System.out.format("%s - %s conversion has existed on %s. We do not allow duplicate rates on the same date. Please try again.\n"
                                    , cmd_list.get(1).toUpperCase(), cmd_list.get(2).toUpperCase(), sdf.format(rate_date));
                                    dup_flag = true;
                                    break;
                                }
                            }
                            if (!dup_flag){
                                List<String> alter_list = new ArrayList<String>();
                                Double alter_rate = 1/rate;

                                alter_list.add(cmd_list.get(2).toUpperCase());
                                alter_list.add(cmd_list.get(1).toUpperCase());
                                alter_list.add("" + alter_rate);
                                alter_list.add(sdf.format(rate_date));

                                List<String> rate_list = new ArrayList<String>();
                                rate_list.add(cmd_list.get(1).toUpperCase());
                                rate_list.add(cmd_list.get(2).toUpperCase());
                                rate_list.add("" + rate);
                                rate_list.add(sdf.format(rate_date));

                                this.rates.add(rate_list);
                                this.rates.add(alter_list);
                                System.out.println(rate_list.toString().replaceAll(", ", " ").replaceAll("\\[|\\]", "") + " has been successfully added.");
                            }
                        }
                        // catch if not a valid date
                        catch (Exception e){
                            System.out.println("Invalid date format. Should be YYYY-MM-DD.");
                        }
                    }
                }
                catch (NumberFormatException e){
                    System.out.println("Rate has to be a number. Please try again.");
                }
            }
        }
        else{
            System.out.println("Cannot add conversion rates because you are not an admin.");
        }
    }

    /* convert money from one currency to another: CONV <FROM> <TO> <AMOUNT>
    Both <FROM> and <TO> should be in the currency type list.
    <AMOUNT> has to be positive.
    Autofilled with empty strings if no such conversions.
    Command length is 4.
     */
    public void cmd_conv(String input){
        List<String> cmd_list = new ArrayList<>(Arrays.asList(input.split(" ")));
        if (cmd_list.size() != 4){
            System.out.println("Wrong command length for CONV. Should be length of 4.");
        }
        else if (!(this.currency_types.contains(cmd_list.get(1).toUpperCase()) && this.currency_types.contains(cmd_list.get(2).toUpperCase()))){
            System.out.println("We don't have such currency type. Please try again.");
        }
        else if (cmd_list.get(1).equalsIgnoreCase(cmd_list.get(2))){
            System.out.println("Cannot convert to a currency itself. Please try again.");
        }
        else{
            // find the latest conversion rates
            String curr_rate = "";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date latest_date = new Date(Long.MIN_VALUE);
            for (int i = 0; i < this.rates.size(); i++){
                // FROM = FROM, TO = TO
                if (this.rates.get(i).get(0).equalsIgnoreCase(cmd_list.get(1)) &&
                        this.rates.get(i).get(1).equalsIgnoreCase(cmd_list.get(2))){
                    try{
                        // once encountered weird get() error from the line below, cannot reproduce the bug
                        if (sdf.parse(this.rates.get(i).get(3)).after(latest_date)){
                            latest_date = sdf.parse(this.rates.get(i).get(3));
                            curr_rate = this.rates.get(i).get(2);
                        }
                    }
                    catch (Exception e){
                        e.printStackTrace();
                    }
                }
            }
            // if new added currency type, no added conversion rate yet
            if (curr_rate.equals("")){
                System.out.format("We don't have information about such conversion from %s to %s.\n", cmd_list.get(1).toUpperCase(), cmd_list.get(2).toUpperCase());
            }
            // such conversion exists
            else{
                try{
                    Double amount = Double.parseDouble(cmd_list.get(3));
                    if (amount <= 0){
                        System.out.println("Amount has to be positive. Please try again.");
                    }
                    else{
                        Double converted_amount = amount * Double.parseDouble(curr_rate);
                        System.out.format("%s %s is %s %s\n", amount, cmd_list.get(1).toUpperCase(),
                                converted_amount, cmd_list.get(2).toUpperCase());
                    }
                }
                catch (NumberFormatException e){
                    System.out.println("Amount has to be a number. Please try again.");
                }
            }
        }
    }

    /* ADMIN ONLY, update the 4 most popular currencies: UPDATE <current_1> <current_2> <current_3> <current_4>
   Those currencies should be in the currency type list.
   Command length is 5.
   */
    public void cmd_update(String input){
        if (this.isAdmin){
            List<String> cmd_list = new ArrayList<>(Arrays.asList(input.split(" ")));
            if (cmd_list.size() != 5){
                System.out.println("Wrong command length for UPDATE. Should be length of 5.");
            }
            else if (!(this.currency_types.contains(cmd_list.get(1).toUpperCase()) && this.currency_types.contains(cmd_list.get(2).toUpperCase())
                    && this.currency_types.contains(cmd_list.get(3).toUpperCase()) && this.currency_types.contains(cmd_list.get(4).toUpperCase()))){
                System.out.println("We don't have such currency type. Please try again.");
            }
            else{
                List<String> tmp_pop = new ArrayList<String>();
                tmp_pop.add(cmd_list.get(1).toUpperCase());
                tmp_pop.add(cmd_list.get(2).toUpperCase());
                tmp_pop.add(cmd_list.get(3).toUpperCase());
                tmp_pop.add(cmd_list.get(4).toUpperCase());
                if (tmp_pop.stream().distinct().count() != 4){
                    System.out.println("Each most popular currency must be distinct. Please try again.");
                }
                else{
                    this.most_pop = tmp_pop;
                    System.out.println(this.most_pop.toString().replaceAll(", ", " ").replaceAll("\\[|\\]", "") + " has been updated as the 4 most popular currencies.");
                }
            }
        }
        else{
            System.out.println("Cannot update most popular currencies because you are not an admin.");
        }
    }

    /* display the 4 most popular currencies (in aligned table): POP
    Autofilled with empty strings if no such conversions.
    Command length is 1.
     */
    public void cmd_pop(){
        if (this.most_pop.isEmpty()){
            System.out.println("Most popular currencies haven't been specified.");
        }
        else{
            String titleFormat = "%-7s";
            String tableFormat = "%-14.14s";
            String rateFormat = "%-10.10s";
            String flucFormat = "%-3s";
            String tFormatInfo = titleFormat + " " + tableFormat + " " + tableFormat + " " + tableFormat + " " + tableFormat;
            String rFormatInfo = titleFormat + " " + rateFormat + " " + flucFormat + " " + rateFormat + " " + flucFormat
                    + " " + rateFormat + " " + flucFormat + " " + rateFormat + " " + flucFormat;
            System.out.format(tFormatInfo, "FROM/TO", this.most_pop.get(0), this.most_pop.get(1), this.most_pop.get(2), this.most_pop.get(3));
            System.out.println();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            for (int i = 0; i < 4; i++){
                List<String> fluctuation = new ArrayList<String>(){{ add(""); add(""); add(""); add("");}};
                List<String> latest = new ArrayList<String>(){{ add(""); add(""); add(""); add("");}};
                for (int j = 0; j < 4; j++){
                    Date latest_date = new Date(Long.MIN_VALUE);
                    for (int k = 0; k < this.rates.size(); k++){
                        if (this.rates.get(k).get(0).equalsIgnoreCase(this.most_pop.get(i)) &&
                                this.rates.get(k).get(1).equalsIgnoreCase(this.most_pop.get(j))){
                            try{
                                // if a latter date
                                if (sdf.parse(this.rates.get(k).get(3)).after(latest_date)){
                                    latest_date = sdf.parse(this.rates.get(k).get(3));
                                    if (!latest.get(j).equals("")){
                                        // determine increase or decrease
                                        Double newer_rate = Double.parseDouble(this.rates.get(k).get(2));
                                        Double older_rate = Double.parseDouble(latest.get(j));
                                        if (newer_rate > older_rate){
                                            fluctuation.set(j, "(I)");
                                        }
                                        else if (newer_rate < older_rate){
                                            fluctuation.set(j, "(D)");
                                        }
                                        else{
                                            fluctuation.set(j, "");
                                        }
                                    }
                                    latest.set(j, this.rates.get(k).get(2));
                                }
                            }
                            catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                    }
                }
                System.out.format(rFormatInfo, this.most_pop.get(i), latest.get(0), fluctuation.get(0),
                        latest.get(1), fluctuation.get(1), latest.get(2), fluctuation.get(2), latest.get(3), fluctuation.get(3));
                System.out.println();
            }
        }
    }

    /*  display all conversion rates, average, median, maximum, minimum and standard deviation
    of the conversion rate of the 2 currencies during the specified start and end date:
    HIST <FROM> <TO> <DATE> <DATE>
    Both <FROM> and <TO> should be in the currency type list.
    Average, median, maximum, minimum and standard deviation are autofilled with empty string if no such conversions.
    Print average, median, maximum, minimum and standard deviation on the first line, then print all the conversions.
    <DATE> is in <YYYY-MM-DD> format and will be validated using java.text.SimpleDateFormat.
    <DATE> <DATE> can be either <START> <END> or <END> <START>
    Command length is 5.
     */
    public void cmd_hist(String input){
        List<String> cmd_list = new ArrayList<>(Arrays.asList(input.split(" ")));
        if (cmd_list.size() != 5){
            System.out.println("Wrong command length for HIST. Should be length of 5.");
        }
        else if (!(this.currency_types.contains(cmd_list.get(1).toUpperCase()) && this.currency_types.contains(cmd_list.get(2).toUpperCase()))){
            System.out.println("We don't have such currency type. Please try again.");
        }
        else{
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            try {
                sdf.setLenient(false);
                Date start_date = sdf.parse(cmd_list.get(3));
                Date end_date = sdf.parse(cmd_list.get(4));
                if (end_date.before(start_date)){
                    end_date = sdf.parse(cmd_list.get(3));
                    start_date = sdf.parse(cmd_list.get(4));
                }
                List<List<String>> rate_hist = new ArrayList<>();
                List<Double> rate_list = new ArrayList<Double>();
                Double rate_sum = 0.0;
                for (int i = 0; i < this.rates.size(); i++){
                    // FROM = FROM, TO = TO
                    if (this.rates.get(i).get(0).equalsIgnoreCase(cmd_list.get(1)) &&
                            this.rates.get(i).get(1).equalsIgnoreCase(cmd_list.get(2))){
                        Date tmp_date = sdf.parse(this.rates.get(i).get(3));
                        // start_date <= tmp_date <= end_date
                        if ((tmp_date.equals(start_date) || tmp_date.after(start_date)) && (tmp_date.equals(end_date) ||
                                tmp_date.before(end_date))){
                            rate_hist.add(this.rates.get(i));
                            rate_list.add(Double.parseDouble(this.rates.get(i).get(2)));
                            rate_sum += Double.parseDouble(this.rates.get(i).get(2));
                        }
                    }
                }
                if (rate_hist.isEmpty()){
                    System.out.format("We don't have information about such conversion from %s to %s between %s and %s.\n",
                            cmd_list.get(1).toUpperCase(), cmd_list.get(2).toUpperCase(),
                            sdf.format(start_date), sdf.format(end_date));
                }
                else{
                    // median
                    Collections.sort(rate_list);
                    Double rate_median;
                    // even size
                    int rate_list_size = rate_list.size();
                    if (rate_list_size % 2 == 0){
                        rate_median = (rate_list.get(rate_list_size/2-1) + rate_list.get(rate_list_size/2)+0.0)/2;
                    }
                    // odd size
                    else{
                        rate_median = rate_list.get((rate_list_size-1)/2);
                    }

                    // average
                    Double rate_average = rate_sum / rate_list_size;
                    // max
                    Double rate_max = Collections.max(rate_list);
                    // min
                    Double rate_min = Collections.min(rate_list);

                    // SD
                    Double rate_sd = 0.0;
                    for (int i = 0; i < rate_list_size; i++){
                        rate_sd += Math.pow((rate_list.get(i) - rate_average), 2);
                    }
                    rate_sd = rate_sd / rate_list_size;
                    rate_sd = Math.sqrt(rate_sd);

                    System.out.format("History of %s to %s between %s and %s:\n", cmd_list.get(1).toUpperCase(),
                            cmd_list.get(2).toUpperCase(), sdf.format(start_date), sdf.format(end_date));
                    for (int i = 0; i < rate_hist.size(); i++){
                        System.out.println("\t" + rate_hist.get(i).toString().replaceAll(", ", " ").replaceAll("\\[|\\]", ""));
                    }
                    System.out.format("Average: %s\n", rate_average);
                    System.out.format("Median: %s\n", rate_median);
                    System.out.format("Max: %s\n", rate_max);
                    System.out.format("Min: %s\n", rate_min);
                    System.out.format("Standard deviation: %s\n", rate_sd);
                }

            }
            catch (Exception e){
                System.out.println("Invalid date format. Should be YYYY-MM-DD.");
                //e.printStackTrace();
            }
        }
    }

    // list all the instructions: HELP
    public void cmd_help(){
        String[] commands = new String[]{"HELP", "CONV", "POP", "HIST", "NEW", "ADD", "UPDATE", "QUIT", "SAVE"};
        String[] formats = new String[]{"HELP", "CONV <FROM> <TO> <AMOUNT>", "POP", "HIST <FROM> <TO> <DATE> <DATE>",
                "NEW <currency_type>", "ADD <FROM> <TO> <RATE> <DATE>", "UPDATE <current_1> <current_2> <current_3> <current_4>", "QUIT", "SAVE"};
        String[] descriptions = new String[] {"list all the instructions", "convert money from one currency to another",
                "display the 4 most popular currencies",
                "display all conversion rates and relative statistics of 2 currencies between 2 dates",
                "add new currency type", "add new conversion rate along with the date",
                "update the 4 most popular currencies", "quit the program",
                "save the current data"};
        String column1Format = "%-6.6s";
        String column2Format = "%-54s";
        String column3Format = "%s";
        String formatInfo = column1Format + " " + column2Format + " " + column3Format;
        for(int i = 0; i < commands.length; i++) {
            System.out.format(formatInfo, commands[i], formats[i], descriptions[i]);
            System.out.println();
        }
    }


    // save the current data to a file_path, and create the file if file doesn't exist (it will overwrite the file)
    public void cmd_save(String file_path){
        File f = new File(file_path);
        try{
            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            PrintStream ps = new PrintStream(fos);
            for (int i = 0; i < this.rates.size(); i++){
                if (i == this.rates.size() - 1){
                    ps.print(this.rates.get(i).get(0) + "," + this.rates.get(i).get(1) + "," + this.rates.get(i).get(2)
                            + "," + this.rates.get(i).get(3));
                }
                else{
                    ps.print(this.rates.get(i).get(0) + "," + this.rates.get(i).get(1) + "," + this.rates.get(i).get(2)
                            + "," + this.rates.get(i).get(3) + "\n");
                }
            }
            System.out.println("The current data has been successfully saved.");
            ps.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }


    // Decide which command is related to the user input
    public void cmd_decider(String input) {
        List<String> input_list = new ArrayList<>(Arrays.asList(input.split(" ")));
        if (input.equalsIgnoreCase("QUIT")){
            this.quiitted = true;
        }
        else if (input.equalsIgnoreCase("HELP")){
            cmd_help();
        }
        else if (input_list.get(0).equalsIgnoreCase("CONV")){
            cmd_conv(input);
        }
        else if (input_list.get(0).equalsIgnoreCase("NEW")){
            cmd_new(input);
        }
        else if (input_list.get(0).equalsIgnoreCase("ADD")){
            cmd_add(input);
        }
        else if (input_list.get(0).equalsIgnoreCase("SAVE")){
            cmd_save(this.default_path);
        }
        else if (input_list.get(0).equalsIgnoreCase("UPDATE")){
            cmd_update(input);
        }
        else if (input_list.get(0).equalsIgnoreCase("POP")){
            cmd_pop();
        }
        else if (input_list.get(0).equalsIgnoreCase("HIST")){
            cmd_hist(input);
        }
        /*// only for testing purposes
        else if (input_list.get(0).equalsIgnoreCase("DIS")){
            display_rates();
        }*/
        else{
            System.out.println("No such instruction. Please enter \"help\" for more info.");
        }
    }

    /*// only for testing purposes
    public void display_rates(){
        List<String> cmd_list = new ArrayList<String>();
        for (int i = 0; i < this.rates.size(); i++){
            System.out.println(this.rates.get(i).toString());
        }
    }*/

    public static void main(String[] args) {
        App convertor = new App();
        convertor.load_data(convertor.default_path);
        convertor.switch_user();
        convertor.cmd_help();
        BufferedReader brd = new BufferedReader(new InputStreamReader(System.in));
        String str_cmd = "";
        try{
            while (convertor.quiitted != true){
                System.out.format("We provide services for %d currencies:", convertor.currency_types.size());
                for (int i = 0; i < convertor.currency_types.size(); i++){
                    System.out.print(" " + convertor.currency_types.get(i));
                }
                System.out.println("");
                str_cmd = brd.readLine();
                convertor.cmd_decider(str_cmd);
                System.out.println("===================================================================");
            }
            brd.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }
}
