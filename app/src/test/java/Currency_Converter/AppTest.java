/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Currency_Converter;



import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.*;

class AppTest {
    public final String test_read = "src/test/resources/currencies.txt";
    public final String test_write = "src/test/resources/saved_currencies.txt";
    ByteArrayOutputStream outstream = null;
    private final PrintStream out = System.out;

    // function that helps to compare with console output
    @BeforeEach
    public void setup(){
        outstream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outstream));
    }

    // list all the instructions: HELP
    @Test
    void test_cmd_help(){
        App test = new App();
        test.cmd_help();
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "HELP   HELP                                                   list all the instructions\n" +
                "CONV   CONV <FROM> <TO> <AMOUNT>                              convert money from one currency to another\n" +
                "POP    POP                                                    display the 4 most popular currencies\n" +
                "HIST   HIST <FROM> <TO> <DATE> <DATE>                         display all conversion rates and relative statistics of 2 currencies between 2 dates\n" +
                "NEW    NEW <currency_type>                                    add new currency type\n" +
                "ADD    ADD <FROM> <TO> <RATE> <DATE>                          add new conversion rate along with the date\n" +
                "UPDATE UPDATE <current_1> <current_2> <current_3> <current_4> update the 4 most popular currencies\n" +
                "QUIT   QUIT                                                   quit the program\n" +
                "SAVE   SAVE                                                   save the current data\n";
        assertEquals(expected, actual);
    }

    /* convert money from one currency to another: CONV <FROM> <TO> <AMOUNT>
    Both <FROM> and <TO> should be in the currency type list.
    <AMOUNT> has to be positive.
    Autofilled with empty strings if no such conversions.
    Command length is 4.
     */
    @Test
    void test_cmd_conv(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_conv("conv");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Wrong command length for CONV. Should be length of 4.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv usd cny 1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "1.0 USD is 6.890146 CNY\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv jpy cny 100");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "100.0 JPY is 4.99036 CNY\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv usd btc 1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv btc usd 1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv btc btc 1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv usd usd 1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Cannot convert to a currency itself. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv usd cny two");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Amount has to be a number. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_conv("conv usd cny -1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Amount has to be positive. Please try again.\n";
        assertEquals(expected, actual);
    }

    /* ADMIN ONLY, add new currency type: NEW <currency_type>
    <currency_type> should not be in the currency type list.
    Command length is 2.
     */
    @Test
    void test_cmd_new(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_new("new");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Cannot add new currency type because you are not an admin.\n";
        assertEquals(expected, actual);

        test.isAdmin = true;
        setup();
        test.cmd_new("new");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Wrong command length for NEW. Should be length of 2.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_new("new usd");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We already have currency USD.\n";
        assertEquals(expected, actual);

        assertFalse(test.currency_types.contains("BTC"));
        setup();
        test.cmd_new("new btc");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "New currency BTC successfully added.\n";
        assertEquals(expected, actual);
        assertTrue(test.currency_types.contains("BTC"));

        setup();
        test.cmd_conv("conv usd btc 1");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have information about such conversion from USD to BTC.\n";
        assertEquals(expected, actual);
    }

    /* ADMIN ONLY, add new conversion rate along with the date: ADD <FROM> <TO> <RATE> <DATE>
    Both <FROM> and <TO> should be in the currency type list.
    <RATE> should not be negative.
    <DATE> is in <YYYY-MM-DD> format and will be validated using java.text.SimpleDateFormat.
    If same <FROM> <TO> <DATE> has existed in the rate list, the action should be rejected.
    Command length is 5.
     */
    @Test
    void test_cmd_add(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_add("add");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Cannot add conversion rates because you are not an admin.\n";
        assertEquals(expected, actual);

        test.isAdmin = true;
        setup();
        test.cmd_add("add");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Wrong command length for ADD. Should be length of 5.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd gbp 0.8649 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add gbp usd 1.15614 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add gbp gbp 1 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd usd 1 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Cannot convert to a currency itself. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd aud one_point_foursix 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Rate has to be a number. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd aud -1.4682 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Rate has to be positive. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd aud 1.4682 2022-Sep-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Invalid date format. Should be YYYY-MM-DD.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd aud 1.4682 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "USD AUD 1.4682 2022-09-02 has been successfully added.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_add("add usd aud 1.4682 2022-09-02");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "USD - AUD conversion has existed on 2022-09-02. We do not allow duplicate rates on the same date. Please try again.\n";
        assertEquals(expected, actual);
    }

    /*
    save the current data to a file_path, and create the file if file doesn't exist (it will overwrite the file)
    by default saved in "src/test/resources/saved_currencies.txt" to maintain the consistence of the original file
     */
    @Test
    void test_cmd_save(){
        App test = new App();
        test.load_data(test_read);

        test.isAdmin = true;
        test.cmd_add("add usd aud 1.4682 2022-09-02");
        test.cmd_save(test_write);

        App test2 = new App();
        test2.load_data(test_write);
        setup();
        test2.cmd_conv("conv usd aud 1");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "1.0 USD is 1.4682 AUD\n";
        assertEquals(expected, actual);

    }

    /* ADMIN ONLY, update the 4 most popular currencies: UPDATE <current_1> <current_2> <current_3> <current_4>
   Those currencies should be in the currency type list.
   Command length is 5.
   */
    @Test
    void test_cmd_update(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_update("update");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Cannot update most popular currencies because you are not an admin.\n";
        assertEquals(expected, actual);

        test.isAdmin = true;
        setup();
        test.cmd_update("update");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Wrong command length for UPDATE. Should be length of 5.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_update("update bit aud cny jpy");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_update("update usd bit cny jpy");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_update("update usd aud bit jpy");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_update("update usd aud cny bit");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_update("update usd usd cny jpy");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Each most popular currency must be distinct. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_update("update usd aud cny jpy");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "USD AUD CNY JPY has been updated as the 4 most popular currencies.\n";
        assertEquals(expected, actual);
        assertEquals("USD", test.most_pop.get(0));
        assertEquals("AUD", test.most_pop.get(1));
        assertEquals("CNY", test.most_pop.get(2));
        assertEquals("JPY", test.most_pop.get(3));
    }

    // to determine whether the user is an admin
    @Test
    void test_switch_user(){
        App test = new App();

        InputStream sysInBackup = System.in;
        ByteArrayInputStream in = new ByteArrayInputStream("Y\r\n".getBytes());
        System.setIn(in);
        test.switch_user();
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Are you an admin? Y/N\n" + "Welcome, admin!\n";
        assertEquals(expected, actual);


        setup();
        ByteArrayInputStream in2 = new ByteArrayInputStream("N\r\n".getBytes());
        System.setIn(in2);
        test.switch_user();
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Are you an admin? Y/N\n" + "Welcome, user!\n";
        assertEquals(expected, actual);
        System.setIn(sysInBackup);
    }

    /* display the 4 most popular currencies (in aligned table): POP
    Autofilled with empty strings if no such conversions.
    Command length is 1.
     */
    @Test
    void test_cmd_pop(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_pop();
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Most popular currencies haven't been specified.\n";
        assertEquals(expected, actual);

        test.isAdmin = true;
        test.cmd_update("update usd eur aud cny");
        
        setup();
        test.cmd_pop();
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "FROM/TO USD            EUR            AUD            CNY           \n" +
                "USD                    0.997457       1.4428566      6.890146   (D)\n" +
                "EUR     1.00255                       1.4460018      6.9168446     \n" +
                "AUD     0.69307        0.691562                      4.7829358     \n" +
                "CNY     0.145135   (I) 0.144575       0.209077                     \n";
        assertEquals(expected, actual);

        test.cmd_add("add eur cny 6.9948 2022-09-09");
        setup();
        test.cmd_pop();
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "FROM/TO USD            EUR            AUD            CNY           \n" +
                "USD                    0.997457       1.4428566      6.890146   (D)\n" +
                "EUR     1.00255                       1.4460018      6.9948     (I)\n" +
                "AUD     0.69307        0.691562                      4.7829358     \n" +
                "CNY     0.145135   (I) 0.14296334 (D) 0.209077                     \n";
        assertEquals(expected, actual);

        test.cmd_add("add usd cny 6.9198286 2022-09-09");
        setup();
        test.cmd_pop();
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "FROM/TO USD            EUR            AUD            CNY           \n" +
                "USD                    0.997457       1.4428566      6.9198286  (I)\n" +
                "EUR     1.00255                       1.4460018      6.9948     (I)\n" +
                "AUD     0.69307        0.691562                      4.7829358     \n" +
                "CNY     0.14451224 (D) 0.14296334 (D) 0.209077                     \n";
        assertEquals(expected, actual);
    }

    /*  display all conversion rates, average, median, maximum, minimum and standard deviation
    of the conversion rate of the 2 currencies during the specified start and end date:
    HIST <FROM> <TO> <DATE> <DATE>
    Both <FROM> and <TO> should be in the currency type list.
    Average, median, maximum, minimum and standard deviation are autofilled with empty string if no such conversions.
    Print average, median, maximum, minimum and standard deviation on the first line, then print all the conversions.
    <DATE> is in <YYYY-MM-DD> format and will be validated using java.text.SimpleDateFormat.
    <DATE> <DATE> can be either <START> <END> or <END> <START>
    Command length is 5.
     */
    @Test
    void test_cmd_hist(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_hist("hist");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "Wrong command length for HIST. Should be length of 5.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist usd btc 2022-01-01 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist btc usd 2022-01-01 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist btc btc 2022-01-01 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have such currency type. Please try again.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist usd cny 2022 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Invalid date format. Should be YYYY-MM-DD.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist usd cny 2022-01-01 2023");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Invalid date format. Should be YYYY-MM-DD.\n";
        assertEquals(expected, actual);

        test.isAdmin = true;
        test.cmd_new("new btc");
        setup();
        test.cmd_hist("hist usd btc 2022-01-01 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "We don't have information about such conversion from USD to BTC between 2022-01-01 and 2023-01-01.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist usd cny 2022-01-01 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "History of USD to CNY between 2022-01-01 and 2023-01-01:\n" +
                "\tUSD CNY 6.9002077 2022-08-30\n" +
                "\tUSD CNY 6.890146 2022-09-01\n" +
                "Average: 6.89517685\n" +
                "Median: 6.89517685\n" +
                "Max: 6.9002077\n" +
                "Min: 6.890146\n" +
                "Standard deviation: 0.005030850000000253\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist usd cny 2023-01-01 2022-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "History of USD to CNY between 2022-01-01 and 2023-01-01:\n" +
                "\tUSD CNY 6.9002077 2022-08-30\n" +
                "\tUSD CNY 6.890146 2022-09-01\n" +
                "Average: 6.89517685\n" +
                "Median: 6.89517685\n" +
                "Max: 6.9002077\n" +
                "Min: 6.890146\n" +
                "Standard deviation: 0.005030850000000253\n";
        assertEquals(expected, actual);

        test.cmd_add("add usd cny 6.8978464 2022-09-04");
        setup();
        test.cmd_hist("hist usd cny 2022-01-01 2023-01-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "History of USD to CNY between 2022-01-01 and 2023-01-01:\n" +
                "\tUSD CNY 6.9002077 2022-08-30\n" +
                "\tUSD CNY 6.890146 2022-09-01\n" +
                "\tUSD CNY 6.8978464 2022-09-04\n" +
                "Average: 6.8960666999999995\n" +
                "Median: 6.8978464\n" +
                "Max: 6.9002077\n" +
                "Min: 6.890146\n" +
                "Standard deviation: 0.00429611846438171\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_hist("hist usd cny 2022-09-01 2022-09-01");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "History of USD to CNY between 2022-09-01 and 2022-09-01:\n" +
                "\tUSD CNY 6.890146 2022-09-01\n" +
                "Average: 6.890146\n" +
                "Median: 6.890146\n" +
                "Max: 6.890146\n" +
                "Min: 6.890146\n" +
                "Standard deviation: 0.0\n";
        assertEquals(expected, actual);
    }

    // Decide which command is related to the user input
    @Test
    void test_cmd_decider(){
        App test = new App();
        test.load_data(test_read);

        test.cmd_decider("help");
        String actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        String expected = "HELP   HELP                                                   list all the instructions\n" +
                "CONV   CONV <FROM> <TO> <AMOUNT>                              convert money from one currency to another\n" +
                "POP    POP                                                    display the 4 most popular currencies\n" +
                "HIST   HIST <FROM> <TO> <DATE> <DATE>                         display all conversion rates and relative statistics of 2 currencies between 2 dates\n" +
                "NEW    NEW <currency_type>                                    add new currency type\n" +
                "ADD    ADD <FROM> <TO> <RATE> <DATE>                          add new conversion rate along with the date\n" +
                "UPDATE UPDATE <current_1> <current_2> <current_3> <current_4> update the 4 most popular currencies\n" +
                "QUIT   QUIT                                                   quit the program\n" +
                "SAVE   SAVE                                                   save the current data\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("conv");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Wrong command length for CONV. Should be length of 4.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("pop");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Most popular currencies haven't been specified.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("hist");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Wrong command length for HIST. Should be length of 5.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("new");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Cannot add new currency type because you are not an admin.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("add");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Cannot add conversion rates because you are not an admin.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("update");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "Cannot update most popular currencies because you are not an admin.\n";
        assertEquals(expected, actual);

        setup();
        test.cmd_decider("hello");
        actual = outstream.toString();
        actual = actual.replaceAll("\\r\\n", "\n");
        actual = actual.replaceAll("\\r", "\n");
        expected = "No such instruction. Please enter \"help\" for more info.\n";
        assertEquals(expected, actual);

        assertFalse(test.quiitted);
        test.cmd_decider("quit");
        assertTrue(test.quiitted);
    }

    // set back the outstream
    @AfterEach
    public void tearDown(){
        System.setOut(out);
    }
}
